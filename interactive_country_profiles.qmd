---
title: "Country Profiles and the UPR"
author: "Anshu Uppal"
date-modified: last-modified # Dynamic modified date
format: 
        dashboard:
                orientation: columns
                nav-buttons: [github]
                github: https://github.com/CeHDI-Foundation/country_profiles
logo: images/logo_5.png
server: shiny
---

```{r}
#| context: setup
#| message: false

# install.packages("pacman")
pacman::p_load(
  here,
  dplyr,forcats,ggplot2,magrittr,readr,readxl,stringr,tibble,tidyr,lubridate,
  # plotly,
  janitor,
  DT,
  sf,
  necountries,
  patchwork
  # Hmisc,
  # ggmapinset
  # cowplot
  # magick,
  # scatterpie,
  # ggnewscale
)

# # Load or install packages from GitHub:
# pacman::p_load_gh(
#   "DrMattG/SDGsR", # Uses API to get SDGs data
#   "aphp/rgho" # Uses API to get data from Global Health Observatory
#   # "PPgp/wpp2024" # United Nations World Population Prospects 2024
#   # "m-muecke/isocountry" # Get ISO codes for countries
# )

# Load in custom functions
source(here("utils.R"))
# Load external data
source(here("code", "external_data_GBD.R"))


# Read in pre-processed datasets
sdg_data <- readRDS(here("data", "SDG_data_enhanced.rds")) |> droplevels()
state_geo <- readRDS(here("output", "state_geo_enhanced.rds"))
nearest_neighbors_list <- readRDS(here("output", "nearest_neighbors_list.rds"))
theme_labels <- source(here("code", "theme_labels.R"))$value # not sure why this returns as a list object rather than a simply dataframe

# Loop through API-generated files to read each one and assign it to an object
for (file_name in list.files(path = here("data", "API_data"), 
                             pattern="\\.rds$",
                             full.names = FALSE)) {
  # Create a variable name by removing the ".rds" extension
  object_name <- gsub("\\.rds$", "", file_name)
  
  # Read the .rds file and assign it to the new variable name
  assign(object_name, readRDS(here("data", "API_data", file_name)))
}
```

# Sidebar  {.sidebar width="400px"}
```{r}
# Create the dropdown selection objects

# Select the Region
selectInput("selected_region", "Select Region:", 
            choices = c("Global", unique(state_geo$wbregion)), 
            selected = "Global")

# Select the State under review
selectInput("selected_SUR", "Select State under Review:",
            choices = unique(state_geo$country),
            multiple = FALSE
            # , options = pickerOptions(
            #         actionsBox = TRUE,
            #         selectOnTab = TRUE
            # )
)
```

```{r}
#| context: server
# Reactive expression to filter data to chosen Region
filtered_upr <- reactive({
  sdg_data |> 
    filter(state_under_review == input$selected_SUR)
})

# Reactive expression to filter data to chosen Region
filtered_upr_region <- reactive({
  if(input$selected_region == "Global") {
    sdg_data
  } else{
    sdg_data |> 
      left_join(state_geo |> 
                  st_drop_geometry() |> 
                  select(country, wbregion), 
                join_by(state_under_review == country)) |> 
      filter(wbregion == input$selected_region) |> 
      select(-wbregion)
  }
})

# Reactive expression to filter data to chosen Region
region_selection <- reactive({
  if(input$selected_region == "Global") {
    state_geo
  } else{
    state_geo |> 
      filter(wbregion == input$selected_region)
  }
})

# Observe changes in the 'selected_region' input, and update setting choices
observeEvent(input$selected_region, {
  # Update the choices in the 'selected_indicateur' input
  updateSelectInput(
    session, "selected_SUR",
    choices = sort(unique(region_selection()$country))
    , selected = sort(unique(region_selection()$country))[1]
  )
})

# Get the SuR wbregion
SUR_region <- reactive({
  state_geo[state_geo$country==input$selected_SUR,]$wbregion
})

# Get the area of the SuR
sur_area <- reactive({
  state_geo |> 
    filter(country %in% c(input$selected_SUR)) |> 
    st_area() |> as.numeric()})

# Creat boundary box around chosen state and region
bbox_selected_SUR <- reactive({
  state_geo |> 
    filter(country %in% c(input$selected_SUR)) |>
    # filter(region %in% c(chosen_region)) |> 
    # st_boundary() # Add a 2,000 km buffer around chosen country
    st_bbox()
})

bbox_SUR_region <- reactive({
  state_geo |> 
    filter(wbregion %in% c(SUR_region())) |>
    # filter(region %in% c(chosen_region)) |> 
    # st_boundary() # Add a 2,000 km buffer around chosen country
    st_bbox()
})
```

```{r}
#| context: server

output$global_map <- renderPlot({
  p1 <- state_geo |> 
    mutate(selected_sur = factor(case_when(country == input$selected_SUR ~ input$selected_SUR, 
                                           .default = "Other"), 
                                 levels = c(input$selected_SUR, "Other"))) |> 
    ggplot(aes(geometry = polygon, color = selected_sur, fill = selected_sur, lwd = selected_sur))+
    geom_sf()+
    scale_color_manual(values = c("green4", "grey80"))+
    scale_linewidth_manual(values=c(0.8, 0.3))+
    scale_fill_manual(values = c("green4", "grey90"))+
    theme_bw()+
    theme(
      panel.grid = element_blank(),
      axis.text = element_blank(), axis.ticks = element_blank()
    )+
    labs(title = NULL,
         fill = NULL,
         color = NULL, lwd = NULL)+
    guides(fill = "none", lwd = "none", color = "none"
           # , fill = guide_legend(nrow = 1)
    )
  
  if(sur_area() > 10^11){p2<-p1} else{p2<-p1+geom_rect(
    aes(
      xmin = bbox_selected_SUR()["xmin"]-1,
      xmax = bbox_selected_SUR()["xmax"]+1,
      ymin = bbox_selected_SUR()["ymin"]-1,
      ymax = bbox_selected_SUR()["ymax"]+1
    ),
    fill = "transparent",      # Make the rectangle hollow
    color = "green4",             # Set the border color
    linewidth = 0.5            # Set the border thickness
  )}
  
  p2
})
```
::: {.callout-note collapse="true"}
# Disclaimer
This dashboard display the results of a **preliminary** analysis regarding recommendations from the first four cycles of the Universal Periodic Review (UPR). ***Results are subject to change as the classification methodology continues to be refined***.

Data related to various indicators (e.g. maternal mortality ratio and estimated abortion rates) were accessed via the Global Health Observatory's API (see <https://www.who.int/data/gho/info/gho-odata-api>), and data regarding the causes of maternal death were obtained using the IHME's GBD Results tool: <https://vizhub.healthdata.org/gbd-results/>.

**Map disclaimer:** CeHDI makes no statement or judgment about the legal status or borders of any country, territory, or city shown on these maps. The information is for reference only.
:::

```{r}
plotOutput("global_map")
```

# UPR: Regional
```{r}
#| context: server

output$global_plot <- renderPlot({
upr_rec_global <- filtered_upr_region() |> 
  droplevels() |> 
  group_by(cycle, state_under_review) |> 
  count(health_related, .drop = FALSE) |> 
  group_by(cycle, health_related) |> mutate(med_n = median(n)) |> 
  select(cycle, health_related, med_n) |> distinct() |> 
  group_by(cycle) |> 
  mutate(med_n_tot = sum(med_n),
         perc = (med_n/med_n_tot)*100,
         perc = case_when(health_related == "Other" ~ "",
                          .default = paste0(sprintf("%1.0f",perc), "%")))

upr_rec_global |> 
  ggplot(aes(x = cycle, y = med_n, fill = health_related))+
  scale_fill_manual(values = c("Health-related" = "#FFC300", "Other" = "cornflowerblue"))+
  geom_bar(stat = "identity")+
  labs(y = "Median number of recommendations", x = "UPR Cycle", 
       title = paste0("Median number of recommendations received by States*\n", input$selected_region),
       fill = NULL,
       caption = "*Cycle 4 is currently underway")+
  geom_text(aes(label = perc), position = position_stack(vjust = 0.5), size = 5)+
  geom_text(aes(label = sprintf("%1.0f", med_n_tot), y = med_n_tot, vjust =-0.2), size = 5, fontface = "bold")+
  theme_bw()+
  # scale_fill_manual(values = c("Health-related" = "#FFC300", "Other" = "cornflowerblue"))+
  # scale_y_continuous(limits = c(0,350))+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 14),
        strip.text = element_text(size = 18),
        plot.caption = element_text(size = 14),
        # title = element_blank(),
        legend.position = "inside",
        legend.position.inside = c(0,1),
        legend.justification = c("left", "top"),
        legend.text = element_text(size = 18),
        legend.background = element_blank())
})

```

```{r}
#| context: server
output$upr_themes_cycle_global <- renderPlot({
  a_1 <- filtered_upr_region() |> 
  select(cycle, health_related:maternal_health, response_upr) |> 
  group_by(cycle, response_upr) |> 
  summarise(across(c(health_related:maternal_health), ~ sum(.x !="Other"))) |> 
  ungroup() |> 
  filter(response_upr %in% c("Supported", "Noted/Other")) |>
  pivot_longer(cols = health_related:maternal_health, 
               names_to = "theme", 
               values_to = "n"
  )

a_2 <- filtered_upr_region() |> 
  select(cycle, health_related:maternal_health, response_upr) |> 
  # mutate(across(c(health_related:maternal_health), ~ .x != "Other")) |> 
  group_by(cycle, response_upr) |> 
  summarise(across(c(health_related:maternal_health), ~ sum(.x =="Other"))) |> 
  ungroup() |> 
  filter(response_upr %in% c("Supported", "Noted/Other")) |>
  pivot_longer(cols = health_related:maternal_health, 
               names_to = "theme", 
               values_to = "n_other"
  )

a_3 <- filtered_upr_region() |> 
  group_by(cycle) |> 
  summarise(health_n = sum(health_related !="Other")) |> 
  ungroup()

a <- left_join(a_1,a_2) |> 
  left_join(a_3) |> 
  mutate(cycle = fct_recode(cycle, "1"="Cycle 1", "2"="Cycle 2", "3"="Cycle 3", "4"="Cycle 4")) |> 
  group_by(cycle, theme) |> 
  mutate(n_tot = sum(n)+sum(n_other)) |> 
  mutate(n_tot_theme = sum(n)) |> 
  mutate(perc = n/n_tot*100,
         perc_theme = n_tot_theme/n_tot*100,
         theme_perc_health = n_tot_theme/health_n*100) |> 
  group_by(cycle, theme) |> 
  mutate(n_sup = paste0("(", sprintf("%1.0f", n/sum(n)*100), "%)"),
         n_sup = case_when(n_tot_theme == 0 ~ "(NA)", .default = n_sup)) |> 
  # mutate(n_sup = case_when(
  #   response_upr == "Noted/Other" ~ "",
  #   response_upr == "Supported" ~ paste0("(", sprintf("%1.0f", n/sum(n)*100), "%)"),
  #   .default = NA
  # )) |> 
  ungroup() |> 
  filter(!theme %in% c(
    "health_related"
    # , "abortion"
    , "TB_malaria", "NTD"
    # , "TB_malaria_NTD"
  )) |> 
  left_join(theme_labels, join_by(theme == variable)) |> 
  arrange(fct_rev(cycle), -n_tot_theme) |> 
  mutate(theme_label = case_when(is.na(theme_label) ~ theme, .default = theme_label),
         theme_label = fct_inorder(theme_label))

max_a <- max(a$perc_theme)
theme_plot <- a |> 
  # mutate(n_tot_theme = case_when(response_upr!="Supported" ~ "", 
  #                                .default = as.character(n_tot_theme))) |> 
  ggplot(aes(x = perc, y = fct_rev(cycle)))+
  geom_col(aes(fill = response_upr))+
  facet_grid(
    rows = vars(theme_label), switch = "y",
    labeller = labeller(theme_label = label_wrap_gen(50))
  )+
  labs(x = "Proportion of all recommendations per UPR cycle (%)", y = NULL,
       fill = "State's response",
       title = paste0("Health-related recommendations in each cycle of the UPR\n", input$selected_region),
       caption = "*Numbers after the bars indicate N (% supported)")+
  # theme_bw()+
  theme_classic()+
  # scale_y_discrete(expand = c(0.1, 0))+
  scale_x_continuous(labels = function(x) paste0(x, "%"), 
                     limits = c(0,max_a+2), 
                     # sec.axis = dup_axis(name = NULL),
                     expand = expansion(mult = c(0, 0.05)) # 0 exactly on axis
  )+
  theme(
    legend.position = "inside",
    legend.position.inside = c(1,0.01),
    legend.justification = c("right", "bottom"),
    legend.frame = element_rect(color = "black"),
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 15),
    legend.background = element_rect(fill = "transparent"),
    axis.text.y = element_text(size = 10, face = "bold"), 
    axis.text.x = element_text(size = 12),
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.title.position = "plot",
    plot.caption = element_text(size=14),
    strip.placement = "outside",
    strip.text.y.left = element_text(angle = 0, vjust = 1, size = 11),
    strip.background = element_rect(fill = NA, linewidth = 1, color = "black", linetype = 1),
    panel.grid = element_blank()
  )+
  geom_text(
    data = a |> filter(response_upr == "Supported"),
    aes(label = paste0(n_tot_theme, " ", n_sup), x = perc_theme),
    hjust = -0.15, size = 3 , vjust=0.25
  ); theme_plot
})
```

```{r}
#| context: server
output$upr_themes_all_global <- renderPlot({
  a_1 <- filtered_upr_region() |> 
  select(cycle, health_related:maternal_health, response_upr) |> 
  # mutate(across(c(health_related:maternal_health), ~ .x != "Other")) |> 
  group_by(response_upr) |> 
  summarise(across(c(health_related:maternal_health), ~ sum(.x !="Other"))) |> 
  ungroup() |> 
  filter(response_upr %in% c("Supported", "Noted/Other")) |>
  pivot_longer(cols = health_related:maternal_health, 
               names_to = "theme", 
               values_to = "n"
  )

a_2 <- filtered_upr_region() |> 
  select(cycle, health_related:maternal_health, response_upr) |> 
  # mutate(across(c(health_related:maternal_health), ~ .x != "Other")) |> 
  group_by(response_upr) |> 
  summarise(across(c(health_related:maternal_health), ~ sum(.x =="Other"))) |> 
  ungroup() |> 
  filter(response_upr %in% c("Supported", "Noted/Other")) |>
  pivot_longer(cols = health_related:maternal_health, 
               names_to = "theme", 
               values_to = "n_other"
  )

a <- left_join(a_1,a_2) |> 
  group_by(theme) |> 
  mutate(n_tot = sum(n)+sum(n_other)) |> 
  mutate(n_tot_theme = sum(n)) |> 
  mutate(perc = n/n_tot*100,
         perc_theme = n_tot_theme/n_tot*100,
         # theme_perc_health = n_tot_theme/health_n*100
  ) |> 
  group_by(theme) |> 
  mutate(n_sup = paste0("(", sprintf("%1.0f", n/sum(n)*100), "%)"),
         n_sup = case_when(n_tot_theme == 0 ~ "(NA)", .default = n_sup)) |> 
  # mutate(n_sup = case_when(
  #   response_upr == "Noted/Other" ~ "",
  #   response_upr == "Supported" ~ paste0("(", sprintf("%1.0f", n/sum(n)*100), "%)"),
  #   .default = NA
  # )) |> 
  ungroup() |> 
  filter(!theme %in% c(
    "health_related"
    # , "abortion"
    , "TB_malaria", "NTD"
    # , "TB_malaria_NTD"
  )) |> 
  left_join(theme_labels, join_by(theme == variable)) |> 
  arrange(-n_tot_theme) |> 
  mutate(theme_label = case_when(is.na(theme_label) ~ theme, .default = theme_label),
         theme_label = fct_inorder(theme_label))


max_a <- max(a$perc_theme)
a |> 
  # mutate(n_tot_theme = case_when(response_upr!="Supported" ~ "", 
  #                                .default = as.character(n_tot_theme))) |> 
  ggplot(aes(x = perc, y = fct_rev(theme_label)))+
  geom_col(aes(fill = response_upr))+
  labs(x = "Proportion of all recommendations (%)", y = NULL,
       fill = "State's response",
       title = paste0("Health-related recommendations of the UPR, up to the fourth cycle\n",input$selected_region),
       caption = "*Numbers after the bars indicate N (% supported)")+
  # theme_bw()+
  theme_classic()+
  # scale_y_discrete(expand = c(0.1, 0))+
  scale_x_continuous(labels = function(x) paste0(x, "%"), 
                     limits = c(0,max_a+2), 
                     # sec.axis = dup_axis(name = NULL),
                     expand = expansion(mult = c(0, 0.05)) # 0 exactly on axis
  )+
  theme(
    legend.position = "inside",
    legend.position.inside = c(1,0),
    legend.justification = c("right", "bottom"),
    legend.frame = element_rect(color = "black"),
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 15),
    legend.background = element_rect(fill = "transparent"),
    axis.text.y = element_text(size = 13),
    axis.text.x = element_text(size = 8),
    plot.title = element_text(hjust = 0.5),
    plot.caption = element_text(size = 14),
    axis.title.y = element_blank(),
    plot.title.position = "plot",
    panel.grid = element_blank()
  )+
  geom_text(
    data = a |> filter(response_upr == "Supported"),
    aes(label = paste0(n_tot_theme, " ", n_sup), x = perc_theme),
    hjust = -0.15, size = 4 , vjust=0.25
  )
})
```

## Column {.tabset}
```{r}
#| title: All recommendations
plotOutput("upr_themes_all_global")
```

```{r}
#| title: Per UPR cycle
plotOutput("upr_themes_cycle_global")
```

## Column 
### Row {height=50%}
```{r}
plotOutput("global_plot")
```

# UPR: SuR
```{r}
#| context: server

output$plot <- renderPlot({
upr_rec_countries <- filtered_upr() |> 
  droplevels() |> 
  group_by(cycle, state_under_review) |> 
  count(health_related, .drop = FALSE) |> group_by(cycle, state_under_review, health_related) |> mutate(med_n = median(n)) |> 
  select(cycle, state_under_review, health_related, med_n) |> distinct() |> 
  group_by(cycle, state_under_review) |> 
  mutate(n_tot = sum(med_n),
         perc = (med_n/n_tot)*100,
         perc = case_when(health_related == "Other" ~ "",
                          .default = paste0(sprintf("%1.0f",perc), "%")))

upr_rec_countries |> 
  ggplot(aes(x = cycle, y = med_n, fill = health_related))+
  scale_fill_manual(values = c("Health-related" = "#FFC300", "Other" = "cornflowerblue"))+
  geom_bar(stat = "identity")+
  labs(y = "Number of recommendations", x = "UPR Cycle", 
       title = "Number of recommendations received by States, per UPR cycle",
       fill = NULL)+
  geom_text(aes(label = perc), position = position_stack(vjust = 0.5), size = 5)+
  geom_text(aes(label = sprintf("%1.0f", n_tot), y = n_tot, vjust =-0.2), size = 5, fontface = "bold")+
  theme_bw()+
  # scale_fill_manual(values = c("Health-related" = "#FFC300", "Other" = "cornflowerblue"))+
  # scale_y_continuous(limits = c(0,350))+
  facet_wrap(.~state_under_review, nrow = 2)+
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 14),
        strip.text = element_text(size = 18),
        # title = element_blank(),
        legend.position = "inside",
        legend.position.inside = c(0,1),
        legend.justification = c("left", "top"),
        legend.text = element_text(size = 18),
        legend.background = element_blank())
})

```

```{r}
#| context: server
output$upr_themes_cycle <- renderPlot({
  a_1 <- filtered_upr() |> 
    select(cycle, state_under_review, health_related:maternal_health, response_upr) |> 
    group_by(cycle, response_upr) |> 
    summarise(across(c(health_related:maternal_health), ~ sum(.x !="Other"))) |> 
    ungroup() |> 
    filter(response_upr %in% c("Supported", "Noted/Other")) |>
    pivot_longer(cols = health_related:maternal_health, 
                 names_to = "theme", 
                 values_to = "n"
    )
  
  a_2 <- filtered_upr() |> 
    select(cycle, state_under_review, health_related:maternal_health, response_upr) |> 
    # mutate(across(c(health_related:maternal_health), ~ .x != "Other")) |> 
    group_by(cycle, response_upr) |> 
    summarise(across(c(health_related:maternal_health), ~ sum(.x =="Other"))) |> 
    ungroup() |> 
    filter(response_upr %in% c("Supported", "Noted/Other")) |>
    pivot_longer(cols = health_related:maternal_health, 
                 names_to = "theme", 
                 values_to = "n_other"
    )
  
  a_3 <- filtered_upr() |> 
    group_by(cycle) |> 
    summarise(health_n = sum(health_related !="Other")) |> 
    ungroup()
  
  a <- left_join(a_1,a_2) |> 
    left_join(a_3) |> 
    mutate(cycle = fct_recode(cycle, "1"="Cycle 1", "2"="Cycle 2", "3"="Cycle 3", "4"="Cycle 4")) |> 
    group_by(cycle, theme) |> 
    mutate(n_tot = sum(n)+sum(n_other)) |> 
    mutate(n_tot_theme = sum(n)) |> 
    mutate(perc = n/n_tot*100,
           perc_theme = n_tot_theme/n_tot*100,
           theme_perc_health = n_tot_theme/health_n*100) |> 
    group_by(cycle, theme) |> 
    mutate(n_sup = paste0("(", sprintf("%1.0f", n/sum(n)*100), "%)"),
           n_sup = case_when(n_tot_theme == 0 ~ "(NA)", .default = n_sup)) |> 
    # mutate(n_sup = case_when(
    #   response_upr == "Noted/Other" ~ "",
    #   response_upr == "Supported" ~ paste0("(", sprintf("%1.0f", n/sum(n)*100), "%)"),
    #   .default = NA
    # )) |> 
    ungroup() |> 
    filter(!theme %in% c(
      "health_related"
      # , "abortion"
      , "TB_malaria", "NTD"
      # , "TB_malaria_NTD"
    )) |> 
    left_join(theme_labels, join_by(theme == variable)) |> 
    arrange(fct_rev(cycle), -n_tot_theme) |> 
    mutate(theme_label = case_when(is.na(theme_label) ~ theme, .default = theme_label),
           theme_label = fct_inorder(theme_label))
  
  max_a <- max(a$perc_theme)
  theme_plot <- a |> 
    # mutate(n_tot_theme = case_when(response_upr!="Supported" ~ "", 
    #                                .default = as.character(n_tot_theme))) |> 
    ggplot(aes(x = perc, y = fct_rev(cycle)))+
    geom_col(aes(fill = response_upr))+
    facet_grid(
      rows = vars(theme_label), switch = "y",
      labeller = labeller(theme_label = label_wrap_gen(50))
    )+
    labs(x = "Proportion of all recommendations per UPR cycle (%)", y = NULL,
         fill = "State's response",
         title = paste("Health-related recommendations in each cycle of the UPR:", input$selected_SUR),
         caption = "*Numbers after the bars indicate N (% supported)")+
    # theme_bw()+
    theme_classic()+
    # scale_y_discrete(expand = c(0.1, 0))+
    scale_x_continuous(labels = function(x) paste0(x, "%"), 
                       limits = c(0,max_a+2), 
                       # sec.axis = dup_axis(name = NULL),
                       expand = expansion(mult = c(0, 0.05)) # 0 exactly on axis
    )+
    theme(
      legend.position = "inside",
      legend.position.inside = c(1,0.01),
      legend.justification = c("right", "bottom"),
      legend.frame = element_rect(color = "black"),
      legend.text = element_text(size = 12),
      legend.title = element_text(size = 15),
      legend.background = element_rect(fill = "transparent"),
      axis.text.y = element_text(size = 10, face = "bold"), 
      axis.text.x = element_text(size = 12),
      plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
      plot.title.position = "plot",
      strip.placement = "outside",
      strip.text.y.left = element_text(angle = 0, vjust = 1, size = 11),
      strip.background = element_rect(fill = NA, linewidth = 1, color = "black", linetype = 1),
      panel.grid = element_blank()
    )+
    geom_text(
      data = a |> filter(response_upr == "Supported"),
      aes(label = paste0(n_tot_theme, " ", n_sup), x = perc_theme),
      hjust = -0.15, size = 3.5 , vjust=0.25
    ); theme_plot
})
```

```{r}
#| context: server
output$upr_themes_all <- renderPlot({
  a_1 <- filtered_upr() |> 
    select(cycle, state_under_review, health_related:maternal_health, response_upr) |> 
    # mutate(across(c(health_related:maternal_health), ~ .x != "Other")) |> 
    group_by(response_upr) |> 
    summarise(across(c(health_related:maternal_health), ~ sum(.x !="Other"))) |> 
    ungroup() |> 
    filter(response_upr %in% c("Supported", "Noted/Other")) |>
    pivot_longer(cols = health_related:maternal_health, 
                 names_to = "theme", 
                 values_to = "n"
    )
  
  a_2 <- filtered_upr() |> 
    select(cycle, state_under_review, health_related:maternal_health, response_upr) |> 
    # mutate(across(c(health_related:maternal_health), ~ .x != "Other")) |> 
    group_by(response_upr) |> 
    summarise(across(c(health_related:maternal_health), ~ sum(.x =="Other"))) |> 
    ungroup() |> 
    filter(response_upr %in% c("Supported", "Noted/Other")) |>
    pivot_longer(cols = health_related:maternal_health, 
                 names_to = "theme", 
                 values_to = "n_other"
    )
  
  a <- left_join(a_1,a_2) |> 
    group_by(theme) |> 
    mutate(n_tot = sum(n)+sum(n_other)) |> 
    mutate(n_tot_theme = sum(n)) |> 
    mutate(perc = n/n_tot*100,
           perc_theme = n_tot_theme/n_tot*100,
           # theme_perc_health = n_tot_theme/health_n*100
    ) |> 
    group_by(theme) |> 
    mutate(n_sup = paste0("(", sprintf("%1.0f", n/sum(n)*100), "%)"),
           n_sup = case_when(n_tot_theme == 0 ~ "(NA)", .default = n_sup)) |> 
    # mutate(n_sup = case_when(
    #   response_upr == "Noted/Other" ~ "",
    #   response_upr == "Supported" ~ paste0("(", sprintf("%1.0f", n/sum(n)*100), "%)"),
    #   .default = NA
    # )) |> 
    ungroup() |> 
    filter(!theme %in% c(
      "health_related"
      # , "abortion"
      , "TB_malaria", "NTD"
      # , "TB_malaria_NTD"
    )) |> 
    left_join(theme_labels, join_by(theme == variable)) |> 
    arrange(-n_tot_theme) |> 
    mutate(theme_label = case_when(is.na(theme_label) ~ theme, .default = theme_label),
           theme_label = fct_inorder(theme_label))
  
  
  max_a <- max(a$perc_theme)
  a |> 
    # mutate(n_tot_theme = case_when(response_upr!="Supported" ~ "", 
    #                                .default = as.character(n_tot_theme))) |> 
    ggplot(aes(x = perc, y = fct_rev(theme_label)))+
    geom_col(aes(fill = response_upr))+
    labs(x = "Proportion of all recommendations per UPR cycle (%)", y = NULL,
         fill = "State's response",
         title = paste("Health-related recommendations in each cycle of the UPR:", input$selected_SUR),
         caption = "*Numbers after the bars indicate N (% supported)")+
    # theme_bw()+
    theme_classic()+
    # scale_y_discrete(expand = c(0.1, 0))+
    scale_x_continuous(labels = function(x) paste0(x, "%"), 
                       limits = c(0,max_a+2), 
                       # sec.axis = dup_axis(name = NULL),
                       expand = expansion(mult = c(0, 0.05)) # 0 exactly on axis
    )+
    theme(
      legend.position = "inside",
      legend.position.inside = c(1,0),
      legend.justification = c("right", "bottom"),
      legend.frame = element_rect(color = "black"),
      legend.text = element_text(size = 12),
      legend.title = element_text(size = 15),
      legend.background = element_rect(fill = "transparent"),
      axis.text.y = element_text(size = 13),
      axis.text.x = element_text(size = 8),
      plot.title = element_text(hjust = 0.5),
      axis.title.y = element_blank(),
      plot.title.position = "plot",
      panel.grid = element_blank()
    )+
    geom_text(
      data = a |> filter(response_upr == "Supported"),
      aes(label = paste0(n_tot_theme, " ", n_sup), x = perc_theme),
      hjust = -0.15, size = 4 , vjust=0.25
    )
})
```

```{r}
#| context: server

output$DT_table <- renderDT(
  filtered_upr() |>  
  mutate(state_under_review = factor(state_under_review)) |> 
  select(text, cycle, response_upr, health_related:maternal_health,
         # groups, 
         state_under_review, document_code, paragraph) |> 
  DT::datatable(
    filter = "top",
    options = list(
      pageLength = 100,
      deferRender = TRUE,
      scrollY = 800,
      scrollX = TRUE,
      scroller = TRUE,
      autoWidth = TRUE,      
      columnDefs = list(list(width = '500px', targets = c(0)),
                        list(width = '200px', targets = c(1)))
    ),
    rownames = FALSE, # set to FALSE for cleaner look
    class = 'cell-border stripe hover compact'
  )
)
```


## Column {.tabset}
```{r}
#| title: All recommendations
plotOutput("upr_themes_all")
```

```{r}
#| title: Per UPR cycle
plotOutput("upr_themes_cycle")
```

```{r}
#| title: Data
DTOutput("DT_table")
```

## Column 
### Row {height=50%}
```{r}
plotOutput("plot")
```

# MMR

```{r}
#| context: server

### MMR map ---------------------------------------------------
output$mmr_map <- renderPlot({
  mmr_estimate_2023 = MMR |> 
    filter(country_name ==input$selected_SUR, YEAR == "2023") |> 
    pull(NumericValue) |> 
    round(0)
  p1<-MMR |> 
    mutate(selected_sur = factor(case_when(country_name == input$selected_SUR ~ input$selected_SUR, 
                                           .default = "Other"), 
                                 levels = c(input$selected_SUR, "Other"))) |> 
    filter(TimeDimensionValue == 2023, !is.na(country_name)) |>
    right_join(state_geo, join_by(COUNTRY == iso3)) |> 
    filter(!is.na(selected_sur)) |> 
    ggplot(aes(geometry = polygon, fill = mmr_cat, color = selected_sur, lwd = selected_sur))+
    geom_sf()+
    scale_linewidth_manual(values=c(0.8, 0.3))+
    scale_color_manual(values = c("blue3", "grey90"))+
    scale_fill_brewer(palette = "YlOrRd", na.value = "grey80", labels = relabel_na)+
    theme_bw()+
    theme(
      panel.grid = element_blank(),
      axis.text = element_blank(), axis.ticks = element_blank(),
      legend.position = "right",
      legend.background = element_blank()
    )+
    labs(title = paste0("Maternal mortality ratio (MMR) estimate in 2023, ", input$selected_SUR, ": ", mmr_estimate_2023, " per 100,000 live births"),
         fill = NULL,
         color = NULL, lwd = NULL)+
    guides(color = "none", lwd = "none"
           # , fill = guide_legend(nrow = 1)
    )+
    coord_sf(
      xlim = c(max(-180, bbox_selected_SUR()[[1]]-20), min(180,bbox_selected_SUR()[[3]]+20)), 
      ylim = c(max(-55.67295, bbox_selected_SUR()[[2]]-20), min(83.6341,bbox_selected_SUR()[[4]]+20)))
  
  if(sur_area() > 10^11){p2<-p1} else{p2<-p1+geom_rect(
    aes(
      xmin = bbox_selected_SUR()["xmin"]-1,
      xmax = bbox_selected_SUR()["xmax"]+1,
      ymin = bbox_selected_SUR()["ymin"]-1,
      ymax = bbox_selected_SUR()["ymax"]+1
    ),
    fill = "transparent",      # Make the rectangle hollow
    color = "red",             # Set the border color
    linewidth = 0.5            # Set the border thickness
  )}
  
  p3<-p1+
    scale_linewidth_manual(values = c(0.2, 0.1))+
    coord_sf(
      xlim = c(bbox_selected_SUR()[[1]], bbox_selected_SUR()[[3]]), 
      ylim = c(bbox_selected_SUR()[[2]], bbox_selected_SUR()[[4]]))+guides(fill = "none")+labs(title = NULL)
  
  if(sur_area() > 10^11){p2} else{p2+p3}
})


### Plot over time ------------------------------------------
output$mmr_time_plot <- renderPlot({
  start_year <- "2005" # set the start year
  dat_plot <- MMR |> 
    filter(country_name %in% c(input$selected_SUR)) |> 
    filter(year >= ymd(paste0(start_year, "-01-01"))) |> 
    # group_by(country_name) |> filter(NumericValue[YEAR == start_year]>50) |>
    group_by(country_name) |> 
    mutate(
      num_stand = NumericValue - NumericValue[YEAR == start_year],
      num_low = Low - NumericValue[YEAR == start_year],
      num_high = High - NumericValue[YEAR == start_year]
    ) |>  
    ungroup()
  
  hline_data <- dat_plot |>
    filter(YEAR == as.numeric(start_year))
  
  dat_plot |> 
    ggplot(aes(x=year, y = NumericValue))+
    labs(
      title = paste0("Trends in Maternal Mortality Ratio (MMR), since ", start_year),
      x = NULL, y = "MMR estimate (per 100,000 live births)"
      # , color = NULL
      , fill = NULL
    )+
    geom_line(lwd=1, color = "tomato3")+
    geom_ribbon(aes(ymin = Low, ymax = High), fill = "tomato3", color = NA, alpha = 0.4)+
    # scale_color_fermenter(n.breaks = 5, palette = "RdYlBu", )+
    scale_fill_fermenter(n.breaks = 5, palette = "RdYlBu", direction = 1)+
    facet_wrap(.~ country_name
               # , scales = "free"
    )+
    geom_hline(data = hline_data, aes(yintercept = NumericValue), lty=2)+
    theme_bw()
})

### Nearest neigbors plot over time ------------------------------------------
output$mmr_time_plot_neighbors <- renderPlot({
  start_year <- "2005" # set the start year
  dat_plot <- MMR |> 
    mutate(selected_sur = factor(case_when(country_name == input$selected_SUR ~ input$selected_SUR, 
                                           .default = "Other"), 
                                 levels = c(input$selected_SUR, "Other"))) |> 
    filter(country_name %in% c(input$selected_SUR, 
                               nearest_neighbors_list[,state_geo |> filter(country == input$selected_SUR) |> pull(rowid)][1:11])) |> 
    filter(year >= ymd(paste0(start_year, "-01-01"))) |> 
    # group_by(country_name) |> filter(NumericValue[YEAR == start_year]>50) |>
    group_by(country_name) |> 
    mutate(
      num_stand = NumericValue - NumericValue[YEAR == start_year],
      num_low = Low - NumericValue[YEAR == start_year],
      num_high = High - NumericValue[YEAR == start_year]
    ) |>  
    ungroup()
  
  hline_data <- dat_plot |>
    filter(YEAR == as.numeric(start_year))
  
  dat_plot |> 
    ggplot(aes(x=year, y = NumericValue))+
    labs(
      title = paste0("Trends in Maternal Mortality Ratio (MMR), since ", start_year),
      x = NULL, y = "MMR estimate (per 100,000 live births)"
      , color = NULL
      , fill = NULL
    )+
    geom_line(lwd=1, aes(color = selected_sur))+
    geom_ribbon(aes(ymin = Low, ymax = High, fill = selected_sur), color = NA, alpha = 0.4)+
    scale_color_manual(values = c("tomato3", "grey30"))+
    scale_fill_manual(values = c("tomato3", "grey30"))+
    guides(color = "none", lwd = "none", fill = "none")+
    facet_wrap(.~ country_name
               # , scales = "free"
    )+
    geom_hline(data = hline_data, aes(yintercept = NumericValue), lty=2)+
    theme_bw()
})

### Causes of deaths ---------------------------------
output$mmr_causes <- renderPlot({
  maternal_disorders_deaths |> 
    filter(country %in% c("Global", input$selected_SUR)) |> 
    filter(!cause_name %in% c("Maternal disorders")) |>
    filter(age_name %in% c("Age-standardized")) |> 
    mutate(country = fct_relevel(country, "Global")) |>
    arrange(country, val) |> 
    mutate(cause_name = fct_inorder(cause_name)) |> 
    droplevels() |> 
    ggplot(aes(y = cause_name, x = val, fill = country))+
    scale_fill_manual(values = c("grey40", "tomato3"))+
    geom_col(position = position_dodge())+
    geom_errorbar(aes(xmin = lower, xmax = upper), width = 0.5, position = position_dodge(width = 0.9))+
    labs(y = "Maternal cause of death", x = "Age-standardized rate (per 100,000)", fill = NULL,
         title = "Distribution of causes of maternal deaths (2021)")+
    # facet_wrap(.~cause_name, ncol=4,
    #            labeller = labeller(cause_name = label_wrap_gen(28)))+
    scale_x_continuous(
      expand = expansion(mult = c(0, 0.05)) # 0 exactly on axis
    )+
    theme_classic()+
    # coord_flip()+
    theme(panel.grid.major.y = element_line(color = "grey"),
          axis.text = element_text(size = 14),
          axis.title = element_text(size = 16),
          legend.position = "inside",
          legend.position.inside = c(1,0.01),
          legend.justification = c("right", "bottom"),
          legend.key.size = unit(0.6, "cm"),
          # legend.background = element_rect(fill = NA),
          legend.text = element_text(size = 16)
    )
})
```

## Column {width=50%}
### Row {height=60%}
```{r}
plotOutput("mmr_map")
```

### Row {height=40%}
#### {.tabset}
```{r}
plotOutput("mmr_causes")
```

::: {.callout-note collapse="false" title="MMR cause definitions"}
**Maternal haemorrhage** includes both postpartum haemorrhage (defined as blood loss ≥500 ml for vaginal delivery and ≥1000 ml for caesarean delivery) and antepartum haemorrhage (defined as vaginal bleeding from any cause at or beyond 20 weeks of gestation).  

**Maternal sepsis** is defined as a temperature <36°C or >38°C and clinical signs of shock (systolic blood pressure <90 mmHg and tachycardia >120 bpm). **Other maternal infections** are defined as any maternal infections excluding HIV, STI, or not related to pregnancy. 

**Maternal hypertensive disorders** include gestational hypertension (onset after 20 weeks gestation), pre-eclampsia, severe preeclampsia, and eclampsia, but exclude chronic hypertension (onset prior to pregnancy or prior to 20 weeks gestation) unless superimposed preeclampsia or eclampsia develop.

**Maternal obstructed labour and uterine rupture** aggregates obstructed labour (arrest in the first or second stage of active labour despite sufficient contractions), uterine rupture (non-surgical breakdown of uterine wall), and fistula (an abnormal opening between the vagina and the bladder or rectum following childbirth). 

**Abortion** is defined as elective or medically indicated termination of pregnancy at any gestational age. **Miscarriage** is defined as spontaneous loss of pregnancy before 24 weeks of gestation with complications requiring medical care.

**Ectopic pregnancy** is defined as pregnancy occurring outside of the uterus.

**Indirect maternal deaths** are due to existing diseases that are exacerbated by pregnancy. Examples include maternal infections and parasitic diseases complicating pregnancy, childbirth, and the puerperium, and diabetes in pregnancy, childbirth, and the puerperium. 

**Late maternal deaths** are deaths that occur six weeks to one year after the end of pregnancy, excluding incidental deaths.

**Maternal deaths aggravated by HIV/AIDS** are deaths occurring in HIV-positive women whose pregnancy has exacerbated their HIV/AIDS, leading to death.

**Other direct maternal disorders** encompasses a wide range of maternal disorders that do not map to other diseases in the GBD cause list, including other fatal or non-fatal complications occurring during pregnancy, childbirth, and the postpartum period. 

See also Cresswell et al. for more background on causes of maternal deaths:  
Cresswell, Jenny A, Monica Alexander, Michael Y C Chong, Heather M Link, Marija Pejchinovska, Ursula Gazeley, Sahar M A Ahmed, et al. “Global and Regional Causes of Maternal Deaths 2009–20: A WHO Systematic Analysis.” The Lancet Global Health 13, no. 4 (April 2025): e626–34. <https://doi.org/10.1016/S2214-109X(24)00560-6>.
:::

## Column {width=50%}
### Row {height=40%}
```{r}
plotOutput("mmr_time_plot")
```
### Row {height=60%}
```{r}
#| title: Comparison with neighboring States
plotOutput("mmr_time_plot_neighbors")
```

# Family planning
```{r}
#| context: server

### Abortion Laws --------------------
abortion_map <- reactive({
  world_abortion_laws |> 
    right_join(state_geo) |> 
    mutate(selected_sur = factor(case_when(country == input$selected_SUR ~ input$selected_SUR, 
                                           .default = "Other"), 
                                 levels = c(input$selected_SUR, "Other"))) |> 
    ggplot(aes(geometry = polygon, fill = category, color = selected_sur, lwd = selected_sur))+
    geom_sf()+
    scale_linewidth_manual(values=c(0.8, 0.3))+
    scale_color_manual(values = c("blue3", "grey90"))+
    scale_fill_manual(values = c("chartreuse4", "cyan3", "gold", "chocolate1", "red3", "purple"), 
                    na.value = "grey90", labels = relabel_na)+
    # scale_fill_brewer(palette = "RdYlBu", na.value = "grey90", labels = relabel_na, direction = -1)+
    theme_bw()+
    theme(
      panel.grid = element_blank(),
      axis.text = element_blank(), axis.ticks = element_blank(),
      legend.position = "inside",
      legend.position.inside = c(0,0),
      legend.justification = c("left", "bottom"),
      legend.background = element_blank(),
      legend.key.size = unit(0.3, "cm"),
      legend.text = element_text(size = 9)
    )+
    labs(title = "Abortion laws by State (current as of June 2023)",
         fill = "Category",
         color = NULL, lwd = NULL)+
    guides(color = "none", lwd = "none", label = "none")+
    theme(axis.title = element_blank())
})

output$abortion_map <- renderPlot({
  abortion_map()
})

output$abortion_map_sur <- renderPlot({
  p1<-abortion_map()+
    theme(legend.position = "right",
          legend.key.size = unit(0.5, "cm"),
      legend.text = element_text(size = 14))+
    coord_sf(
      xlim = c(max(-180, bbox_selected_SUR()[[1]]-20), min(180,bbox_selected_SUR()[[3]]+20)), 
      ylim = c(max(-55.67295, bbox_selected_SUR()[[2]]-20), min(83.6341,bbox_selected_SUR()[[4]]+20)))
  
  if(sur_area() > 10^11){p2<-p1} else{p2<-p1+geom_rect(
    aes(
      xmin = bbox_selected_SUR()["xmin"]-1,
      xmax = bbox_selected_SUR()["xmax"]+1,
      ymin = bbox_selected_SUR()["ymin"]-1,
      ymax = bbox_selected_SUR()["ymax"]+1
    ),
    fill = "transparent",      # Make the rectangle hollow
    color = "red",             # Set the border color
    linewidth = 0.5            # Set the border thickness
  )}
  
  p3<-p1+
    scale_linewidth_manual(values = c(0.2, 0.1))+
    coord_sf(
      xlim = c(bbox_selected_SUR()[[1]], bbox_selected_SUR()[[3]]), 
      ylim = c(bbox_selected_SUR()[[2]], bbox_selected_SUR()[[4]]))+guides(fill = "none")+labs(title = NULL)
  
  if(sur_area() > 10^11){p2} else{p2+p3}
})

### Abortion rate ---------------------------
output$abortion_rate <- renderPlot({
  p1<-abortion_rate |> 
    filter(!is.na(COUNTRY)) |> 
    filter(Dim1 == "UNCERTAINTY_INTERVAL_UI95") |> 
    # filter(country_name %in% c(ecsa_states)) |> 
    # group_by(COUNTRY) |> 
    # slice_max(order_by = year, n = 1) |> ungroup() |> 
    right_join(state_geo, join_by(COUNTRY == iso3)) |> 
    # filter(region == "Africa") |>
    mutate(selected_sur = factor(case_when(country == input$selected_SUR ~ input$selected_SUR, 
                                           .default = "Other"), 
                                 levels = c(input$selected_SUR, "Other"))) |> 
    ggplot(aes(geometry = polygon, fill = NumericValue, color = selected_sur, lwd = selected_sur))+
    geom_sf()+
    scale_linewidth_manual(values=c(0.8, 0.3))+
    scale_color_manual(values = c("blue3", "grey90"))+
    scale_fill_stepsn(n.breaks = 8,  na.value = "grey50",
                      colors = hcl.colors(n=8, palette = "RdYlBu", rev = TRUE)
    )+
    theme_bw()+
    theme(
      panel.grid = element_blank(),
      axis.text = element_blank(), axis.ticks = element_blank(),
      legend.position = "right",
      legend.background = element_blank()
    )+
    labs(title = "Abortion rate (model-estimated), 2015-2019",
         fill = "Annual estimate\n(per 1,000)",
         color = NULL, lwd = NULL)+
    guides(color = "none", lwd = "none", label = "none")+
    theme(axis.title = element_blank())+
    coord_sf(
      xlim = c(max(-180, bbox_selected_SUR()[[1]]-20), min(180,bbox_selected_SUR()[[3]]+20)), 
      ylim = c(max(-55.67295, bbox_selected_SUR()[[2]]-20), min(83.6341,bbox_selected_SUR()[[4]]+20)))
  
  if(sur_area() > 10^11){p2<-p1} else{p2<-p1+geom_rect(
    aes(
      xmin = bbox_selected_SUR()["xmin"]-1,
      xmax = bbox_selected_SUR()["xmax"]+1,
      ymin = bbox_selected_SUR()["ymin"]-1,
      ymax = bbox_selected_SUR()["ymax"]+1
    ),
    fill = "transparent",      # Make the rectangle hollow
    color = "red",             # Set the border color
    linewidth = 0.5            # Set the border thickness
  )}
  
  p3<-p1+
    scale_linewidth_manual(values = c(0.2, 0.1))+
    coord_sf(
      xlim = c(bbox_selected_SUR()[[1]], bbox_selected_SUR()[[3]]), 
      ylim = c(bbox_selected_SUR()[[2]], bbox_selected_SUR()[[4]]))+guides(fill = "none")+labs(title = NULL)
  
  if(sur_area() > 10^11){p2} else{p2+p3}
})

###############

### Unintended pregnancy -----------------------------
output$unintended_pregnancy <- renderPlot({
  p1<- unintended_pregnancy |> 
    filter(!is.na(COUNTRY)) |> 
    filter(Dim1 == "UNCERTAINTY_INTERVAL_UI95") |> 
    # filter(country_name %in% c(ecsa_states)) |> 
    # group_by(COUNTRY) |> 
    # slice_max(order_by = year, n = 1) |> ungroup() |> 
    right_join(state_geo, join_by(COUNTRY == iso3)) |> 
    # filter(region == "Africa") |>
    mutate(selected_sur = factor(case_when(country == input$selected_SUR ~ input$selected_SUR, 
                                           .default = "Other"), 
                                 levels = c(input$selected_SUR, "Other"))) |> 
    ggplot(aes(geometry = polygon, fill = NumericValue, color = selected_sur, lwd = selected_sur))+
    geom_sf()+
    scale_linewidth_manual(values=c(0.8, 0.3))+
    scale_color_manual(values = c("blue3", "grey90"))+
    scale_fill_fermenter(n.breaks = 10, 
                         palette = "RdYlBu", direction = -1,
                         na.value = "grey80", 
                         labels = relabel_na)+
    theme_bw()+
    theme(
      panel.grid = element_blank(),
      axis.text = element_blank(), axis.ticks = element_blank(),
      legend.position = "right",
      legend.background = element_blank()
    )+
    labs(title = "Unintended pregnancy (model-estimated), 2015-2019",
         fill = "Annual estimate\n(per 1,000)",
         color = NULL, lwd = NULL)+
    guides(color = "none", lwd = "none", label = "none")+
    theme(axis.title = element_blank())+
    coord_sf(
      xlim = c(max(-180, bbox_selected_SUR()[[1]]-20), min(180,bbox_selected_SUR()[[3]]+20)), 
      ylim = c(max(-55.67295, bbox_selected_SUR()[[2]]-20), min(83.6341,bbox_selected_SUR()[[4]]+20)))
  
  if(sur_area() > 10^11){p2<-p1} else{p2<-p1+geom_rect(
    aes(
      xmin = bbox_selected_SUR()["xmin"]-1,
      xmax = bbox_selected_SUR()["xmax"]+1,
      ymin = bbox_selected_SUR()["ymin"]-1,
      ymax = bbox_selected_SUR()["ymax"]+1
    ),
    fill = "transparent",      # Make the rectangle hollow
    color = "red",             # Set the border color
    linewidth = 0.5            # Set the border thickness
  )}
  
  p3<-p1+
    scale_linewidth_manual(values = c(0.2, 0.1))+
    coord_sf(
      xlim = c(bbox_selected_SUR()[[1]], bbox_selected_SUR()[[3]]), 
      ylim = c(bbox_selected_SUR()[[2]], bbox_selected_SUR()[[4]]))+guides(fill = "none")+labs(title = NULL)
  
  if(sur_area() > 10^11){p2} else{p2+p3}
})

### Met need for family planning -------------------------------
output$family_planning <- renderPlot({
  p1<- family_planning |> 
    filter(!is.na(COUNTRY)) |> 
    group_by(COUNTRY) |> 
    slice_max(order_by = year, n = 1) |> ungroup() |> 
    right_join(state_geo, join_by(COUNTRY == iso3)) |> 
    mutate(selected_sur = factor(case_when(country == input$selected_SUR ~ input$selected_SUR, 
                                           .default = "Other"), 
                                 levels = c(input$selected_SUR, "Other"))) |> 
    ggplot(aes(geometry = polygon, fill = value_cat, color = selected_sur, lwd = selected_sur))+
    geom_sf()+
    scale_linewidth_manual(values=c(0.8, 0.3))+
    scale_color_manual(values = c("blue3", "grey90"))+
    scale_fill_brewer(palette = "RdYlBu", na.value = "grey50", labels = relabel_na)+
    theme_bw()+
    theme(
      panel.grid = element_blank(),
      axis.text = element_blank(), axis.ticks = element_blank(),
      legend.position = "right",
      legend.background = element_blank()
    )+
    labs(title = str_wrap("Women of reproductive age (aged 15-49 years) who have their need for family planning satisfied with modern methods (%), latest year", 60),
         fill = NULL,
         color = NULL, lwd = NULL)+
    guides(color = "none", lwd = "none", label = "none")+
    theme(axis.title = element_blank())+
    coord_sf(
      xlim = c(max(-180, bbox_selected_SUR()[[1]]-20), min(180,bbox_selected_SUR()[[3]]+20)), 
      ylim = c(max(-55.67295, bbox_selected_SUR()[[2]]-20), min(83.6341,bbox_selected_SUR()[[4]]+20)))
  
  if(sur_area() > 10^11){p2<-p1} else{p2<-p1+geom_rect(
    aes(
      xmin = bbox_selected_SUR()["xmin"]-1,
      xmax = bbox_selected_SUR()["xmax"]+1,
      ymin = bbox_selected_SUR()["ymin"]-1,
      ymax = bbox_selected_SUR()["ymax"]+1
    ),
    fill = "transparent",      # Make the rectangle hollow
    color = "red",             # Set the border color
    linewidth = 0.5            # Set the border thickness
  )}
  
  p3<-p1+
    scale_linewidth_manual(values = c(0.2, 0.1))+
    coord_sf(
      xlim = c(bbox_selected_SUR()[[1]], bbox_selected_SUR()[[3]]), 
      ylim = c(bbox_selected_SUR()[[2]], bbox_selected_SUR()[[4]]))+guides(fill = "none")+labs(title = NULL)
  
  if(sur_area() > 10^11){p2} else{p2+p3}
})

```

## Abortion laws and family planning

### Row {height=50%}
```{r}
plotOutput("abortion_map_sur")
```

### Row {height=50%}
```{r}
plotOutput("family_planning")
```

## Abortion rate and unintended pregnancy
### Row {height=50%}
```{r}
plotOutput("abortion_rate")
```

### Row {height=50%}
```{r}
plotOutput("unintended_pregnancy")
```
